#include <unistd.h>
#include <stdlib.h>

#define SIZE 4

void put_char(char c)
{
	write(1, &c, 1);
}

void print_grid(int grid[SIZE][SIZE])
{
	for (int r = 0; r < SIZE; r++)
	{
		for (int c = 0; c < SIZE; c++)
		{
			put_char(grid[r][c] + '0');
			if (c < SIZE - 1)
				put_char(' ');
		}
		put_char('\n');
	}
}

int parse_clues(char *str, int clues[4][SIZE])
{
	int i = 0, count = 0;
	while (str[i])
	{
		if (str[i] >= '1' && str[i] <= '4')
		{
			int val = str[i] - '0';
			clues[count / SIZE][count % SIZE] = val;
			count++;
		}
		i++;
	}
	return (count == 16);
}

int is_unique(int grid[SIZE][SIZE], int row, int col, int val)
{
	for (int i = 0; i < SIZE; i++)
		if (grid[row][i] == val || grid[i][col] == val)
			return 0;
	return 1;
}

int count_visible_line(int line[SIZE])
{
	int count = 0, max = 0;
	for (int i = 0; i < SIZE; i++)
	{
		if (line[i] > max)
		{
			max = line[i];
			count++;
		}
	}
	return count;
}

int check_row(int grid[SIZE][SIZE], int clues[4][SIZE], int row)
{
	int line[SIZE], reversed[SIZE];
	for (int i = 0; i < SIZE; i++)
	{
		if (grid[row][i] == 0)
			return 1;
		line[i] = grid[row][i];
		reversed[SIZE - 1 - i] = grid[row][i];
	}
	if ((clues[2][row] && count_visible_line(line) != clues[2][row]) ||
		(clues[3][row] && count_visible_line(reversed) != clues[3][row]))
		return 0;
	return 1;
}

int check_col(int grid[SIZE][SIZE], int clues[4][SIZE], int col)
{
	int line[SIZE], reversed[SIZE];
	for (int i = 0; i < SIZE; i++)
	{
		if (grid[i][col] == 0)
			return 1;
		line[i] = grid[i][col];
		reversed[SIZE - 1 - i] = grid[i][col];
	}
	if ((clues[0][col] && count_visible_line(line) != clues[0][col]) ||
		(clues[1][col] && count_visible_line(reversed) != clues[1][col]))
		return 0;
	return 1;
}

int solve(int grid[SIZE][SIZE], int clues[4][SIZE], int pos)
{
	int row = pos / SIZE;
	int col = pos % SIZE;

	for (int val = 1; val <= SIZE; val++)
	{
		if (is_unique(grid, row, col, val))
		{
			grid[row][col] = val;
			if (check_row(grid, clues, row) && check_col(grid, clues, col))
			{
				if (solve(grid, clues, pos + 1))
					return 1;
			}
			grid[row][col] = 0;
		}
		if (pos == SIZE * SIZE)
		return 0;
	}
	//return 0;
}

int main(int argc, char **argv)
{
	if (argc != 2)
		return (write(1, "Error\n", 6), 1);

	int clues[4][SIZE] = {0};
	int grid[SIZE][SIZE] = {0};

	/* if (!parse_clues(argv[1], clues))
		return (write(1, "Error\n", 6), 1);

	if (solve(grid, clues, 0))
		print_grid(grid);
	else
		write(1, "Error\n", 6);
*/
	return 0;
}
